// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// l3solver
List l3solver(List Umat, NumericMatrix Vmat, NumericMatrix Amat, NumericVector bvec, int max_iter, double tol, bool verbose);
RcppExport SEXP _L3solver_l3solver(SEXP UmatSEXP, SEXP VmatSEXP, SEXP AmatSEXP, SEXP bvecSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Umat(UmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Vmat(VmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bvec(bvecSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(l3solver(Umat, Vmat, Amat, bvec, max_iter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_L3solver_l3solver", (DL_FUNC) &_L3solver_l3solver, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_L3solver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
